# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Nota: make clean no hace nada porque los archivos intermedios
# ya no se generan en la carpeta ra√≠z

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR=./third-party/googletest

# Where to find user code.
USER_DIR=./tests
OUTPUT_DIR=./tests/executables
INTERMEDIATE_DIR=./tests/intermediate_files
O_CLASSES_DIR=$(INTERMEDIATE_DIR)/classes
LIBDIR=./lib
INCLUDEDIR=./include

_OBJ= tcalendario.o tvectorcalendario.o tlistacalendario.o
OBJ = $(patsubst %,$(O_CLASSES_DIR)/%,$(_OBJ))

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = tcalendarioTest tlistacalendarioTest tvectorcalendarioTest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

CXX=g++

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(INTERMEDIATE_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(INTERMEDIATE_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(INTERMEDIATE_DIR)/gtest_main.a : $(INTERMEDIATE_DIR)/gtest-all.o $(INTERMEDIATE_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# tcalendarioTest : $(INTERMEDIATE_DIR)/tcalendarioTest.o gtest_main.a
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(OUTPUT_DIR)/$@

$(O_CLASSES_DIR)/%.o : $(LIBDIR)/%.cpp $(INCLUDEDIR)/%.h
	$(CXX) -g -c -I$(INCLUDEDIR) -o $@ $<

$(INTERMEDIATE_DIR)/%.o : $(USER_DIR)/%.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

tcalendarioTest : $(INTERMEDIATE_DIR)/tcalendarioTest.o $(INTERMEDIATE_DIR)/gtest_main.a $(OBJ)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(OUTPUT_DIR)/$@

tlistacalendarioTest : $(INTERMEDIATE_DIR)/tlistacalendarioTest.o $(INTERMEDIATE_DIR)/gtest_main.a $(OBJ)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(OUTPUT_DIR)/$@

tvectorcalendarioTest : $(INTERMEDIATE_DIR)/tvectorcalendarioTest.o $(INTERMEDIATE_DIR)/gtest_main.a $(OBJ)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(OUTPUT_DIR)/$@